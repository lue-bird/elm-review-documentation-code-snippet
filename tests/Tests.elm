module Tests exposing (tests)

import Review.Documentation.CodeSnippet
import Review.Project
import Review.Test
import Test exposing (Test)


tests : Test
tests =
    Test.describe "elm-review-documentation-code-snippet"
        [ Test.test "reports missing DocumentationCodeSnippetTest module"
            (\() ->
                """module A exposing (a)

a =
    a
"""
                    |> Review.Test.run Review.Documentation.CodeSnippet.check
                    |> Review.Test.expect
                        [ Review.Test.globalErrors
                            [ { message = "documentation code snippet test module needs to be added"
                              , details =
                                    [ "We need a module to generate documentation code snippet tests in. Please add a module tests/DocumentationCodeSnippetTest.elm."
                                    ]
                              }
                            ]
                        ]
            )
        , Test.test "creates empty test file when no code snippets exist and DocumentationCodeSnippetTest module exists"
            (\() ->
                [ """module A exposing (a)

a =
    a
"""
                , """module DocumentationCodeSnippetTest exposing (tests)

tests =
    tests
"""
                ]
                    |> Review.Test.runOnModules
                        Review.Documentation.CodeSnippet.check
                    |> Review.Test.expectErrorsForModules
                        [ ( "DocumentationCodeSnippetTest"
                          , [ Review.Test.error
                                { message = "documentation code snippet test can be added"
                                , details =
                                    [ "Adding them will help verify that code blocks in your readme and module documentation work correctly."
                                    ]
                                , under = "module"
                                }
                                |> Review.Test.whenFixed
                                    emptyGeneratedTestSource
                            ]
                          )
                        ]
            )
        , Test.test "does not re-generate empty test file when no code snippets exist and DocumentationCodeSnippetTest module is equivalent to the empty test file"
            (\() ->
                [ """module A exposing (a)

a =
    a
"""
                , emptyGeneratedTestSource
                ]
                    |> Review.Test.runOnModules
                        Review.Documentation.CodeSnippet.check
                    |> Review.Test.expectNoErrors
            )
        , Test.test "creates filled test file when code snippet with same-line --> exists and DocumentationCodeSnippetTest module exists"
            (\() ->
                [ """module A exposing (plus1)

{-| + 1.

    1 |> A.plus1 --> 2

-}
plus1 n =
    n + 1
"""
                , """module DocumentationCodeSnippetTest exposing (tests)

tests =
    tests
"""
                ]
                    |> Review.Test.runOnModules
                        Review.Documentation.CodeSnippet.check
                    |> Review.Test.expectErrorsForModules
                        [ ( "DocumentationCodeSnippetTest"
                          , [ Review.Test.error
                                { message = "documentation code snippet test can be added"
                                , details =
                                    [ "Adding them will help verify that code blocks in your readme and module documentation work correctly."
                                    ]
                                , under = "module"
                                }
                                |> Review.Test.whenFixed
                                    """module DocumentationCodeSnippetTest exposing (tests)

{-| automatically generated by [elm-review-documentation-code-snippet](https://dark.elm.dmy.fr/packages/lue-bird/elm-review-documentation-code-snippet/latest)

-}

import A
import Expect
import Test


tests : Test.Test
tests =
    Test.describe
        "documentation code snippets"
        [ Test.describe
            "A"
            [ Test.describe
                "plus1"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test "0" (\\() -> (1 |> A.plus1) |> Expect.equal 2) ]
                ]
            ]
        ]
"""
                            ]
                          )
                        ]
            )
        , Test.test "creates filled test file when code snippet with next-line --> exists and DocumentationCodeSnippetTest module exists"
            (\() ->
                [ """module A exposing (plus1)

{-| + 1.

    1 |> A.plus1
    --> 2

-}
plus1 n =
    n + 1
"""
                , """module DocumentationCodeSnippetTest exposing (tests)

tests =
    tests
"""
                ]
                    |> Review.Test.runOnModules
                        Review.Documentation.CodeSnippet.check
                    |> Review.Test.expectErrorsForModules
                        [ ( "DocumentationCodeSnippetTest"
                          , [ Review.Test.error
                                { message = "documentation code snippet test can be added"
                                , details =
                                    [ "Adding them will help verify that code blocks in your readme and module documentation work correctly."
                                    ]
                                , under = "module"
                                }
                                |> Review.Test.whenFixed
                                    """module DocumentationCodeSnippetTest exposing (tests)

{-| automatically generated by [elm-review-documentation-code-snippet](https://dark.elm.dmy.fr/packages/lue-bird/elm-review-documentation-code-snippet/latest)

-}

import A
import Expect
import Test


tests : Test.Test
tests =
    Test.describe
        "documentation code snippets"
        [ Test.describe
            "A"
            [ Test.describe
                "plus1"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test "0" (\\() -> (1 |> A.plus1) |> Expect.equal 2) ]
                ]
            ]
        ]
"""
                            ]
                          )
                        ]
            )
        , Test.test "creates filled test file when code snippet with multiple next-line --> exists and DocumentationCodeSnippetTest module exists"
            (\() ->
                [ """module A exposing (plus1And2)

{-| + 1.

    1 |> A.plus1And2
    --> ( 2
    --> , 3
    --> )

-}
plus1And2 n =
    ( n + 1, n + 2 )
"""
                , """module DocumentationCodeSnippetTest exposing (tests)

tests =
    tests
"""
                ]
                    |> Review.Test.runOnModules
                        Review.Documentation.CodeSnippet.check
                    |> Review.Test.expectErrorsForModules
                        [ ( "DocumentationCodeSnippetTest"
                          , [ Review.Test.error
                                { message = "documentation code snippet test can be added"
                                , details =
                                    [ "Adding them will help verify that code blocks in your readme and module documentation work correctly."
                                    ]
                                , under = "module"
                                }
                                |> Review.Test.whenFixed
                                    """module DocumentationCodeSnippetTest exposing (tests)

{-| automatically generated by [elm-review-documentation-code-snippet](https://dark.elm.dmy.fr/packages/lue-bird/elm-review-documentation-code-snippet/latest)

-}

import A
import Expect
import Test


tests : Test.Test
tests =
    Test.describe
        "documentation code snippets"
        [ Test.describe
            "A"
            [ Test.describe
                "plus1And2"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\\() -> (1 |> A.plus1And2) |> Expect.equal ( 2, 3 ))
                    ]
                ]
            ]
        ]
"""
                            ]
                          )
                        ]
            )
        , Test.test "creates test for --:"
            (\() ->
                [ """module A exposing (plus1)

{-| + 1.

    1 |> A.plus1 --: Int

-}
plus1 n =
    n + 1
"""
                , """module DocumentationCodeSnippetTest exposing (tests)

tests =
    tests
"""
                ]
                    |> Review.Test.runOnModules
                        Review.Documentation.CodeSnippet.check
                    |> Review.Test.expectErrorsForModules
                        [ ( "DocumentationCodeSnippetTest"
                          , [ Review.Test.error
                                { message = "documentation code snippet test can be added"
                                , details =
                                    [ "Adding them will help verify that code blocks in your readme and module documentation work correctly."
                                    ]
                                , under = "module"
                                }
                                |> Review.Test.whenFixed
                                    """module DocumentationCodeSnippetTest exposing (tests)

{-| automatically generated by [elm-review-documentation-code-snippet](https://dark.elm.dmy.fr/packages/lue-bird/elm-review-documentation-code-snippet/latest)

-}

import A
import Expect
import Test


tests : Test.Test
tests =
    Test.describe
        "documentation code snippets"
        [ Test.describe
            "A"
            [ Test.describe
                "plus1"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\\() ->
                            let
                                unused : Basics.Int
                                unused =
                                    1 |> A.plus1
                            in
                            Expect.pass
                        )
                    ]
                ]
            ]
        ]
"""
                            ]
                          )
                        ]
            )
        , Test.test "creates test when code snippet checked expression is multi-line"
            (\() ->
                [ """module A exposing (plus1)

{-| + 1.

    1
        |> A.plus1
    --> 2

-}
plus1 n =
    n + 1
"""
                , """module DocumentationCodeSnippetTest exposing (tests)

tests =
    tests
"""
                ]
                    |> Review.Test.runOnModules
                        Review.Documentation.CodeSnippet.check
                    |> Review.Test.expectErrorsForModules
                        [ ( "DocumentationCodeSnippetTest"
                          , [ Review.Test.error
                                { message = "documentation code snippet test can be added"
                                , details =
                                    [ "Adding them will help verify that code blocks in your readme and module documentation work correctly."
                                    ]
                                , under = "module"
                                }
                                |> Review.Test.whenFixed
                                    """module DocumentationCodeSnippetTest exposing (tests)

{-| automatically generated by [elm-review-documentation-code-snippet](https://dark.elm.dmy.fr/packages/lue-bird/elm-review-documentation-code-snippet/latest)

-}

import A
import Expect
import Test


tests : Test.Test
tests =
    Test.describe
        "documentation code snippets"
        [ Test.describe
            "A"
            [ Test.describe
                "plus1"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test "0" (\\() -> (1 |> A.plus1) |> Expect.equal 2) ]
                ]
            ]
        ]
"""
                            ]
                          )
                        ]
            )
        , Test.test "creates test when code snippet checked expression and expectation is multi-line"
            (\() ->
                [ """module A exposing (plus1)

{-| + 1.


    import Dict

    1
        |> A.plus1
    --> Dict.fromList
    --> [ 2
    --> ]

-}
plus1 n =
    Dict.singleton (n + 1)
"""
                , """module DocumentationCodeSnippetTest exposing (tests)

tests =
    tests
"""
                ]
                    |> Review.Test.runOnModules
                        Review.Documentation.CodeSnippet.check
                    |> Review.Test.expectErrorsForModules
                        [ ( "DocumentationCodeSnippetTest"
                          , [ Review.Test.error
                                { message = "documentation code snippet test can be added"
                                , details =
                                    [ "Adding them will help verify that code blocks in your readme and module documentation work correctly."
                                    ]
                                , under = "module"
                                }
                                |> Review.Test.whenFixed
                                    """module DocumentationCodeSnippetTest exposing (tests)

{-| automatically generated by [elm-review-documentation-code-snippet](https://dark.elm.dmy.fr/packages/lue-bird/elm-review-documentation-code-snippet/latest)

-}

import A
import Dict
import Expect
import Test


tests : Test.Test
tests =
    Test.describe
        "documentation code snippets"
        [ Test.describe
            "A"
            [ Test.describe
                "plus1"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\\() ->
                            (1 |> A.plus1) |> Expect.equal (Dict.fromList [ 2 ])
                        )
                    ]
                ]
            ]
        ]
"""
                            ]
                          )
                        ]
            )
        , Test.test "finds origin of same-module-declared variants"
            (\() ->
                [ """module A exposing (MyResult(..), plus1)

type MyResult
    = Success Int
    | Failure String

{-| + 1.

    A.Success 1 |> A.plus1 --> A.Success 2

-}
plus1 myResult =
    case myResult of
        Success n ->
            (n + 1) |> Success
        
        Failure reason ->
            Failure reason
"""
                , """module DocumentationCodeSnippetTest exposing (tests)

tests =
    tests
"""
                ]
                    |> Review.Test.runOnModules
                        Review.Documentation.CodeSnippet.check
                    |> Review.Test.expectErrorsForModules
                        [ ( "DocumentationCodeSnippetTest"
                          , [ Review.Test.error
                                { message = "documentation code snippet test can be added"
                                , details =
                                    [ "Adding them will help verify that code blocks in your readme and module documentation work correctly."
                                    ]
                                , under = "module"
                                }
                                |> Review.Test.whenFixed
                                    """module DocumentationCodeSnippetTest exposing (tests)

{-| automatically generated by [elm-review-documentation-code-snippet](https://dark.elm.dmy.fr/packages/lue-bird/elm-review-documentation-code-snippet/latest)

-}

import A
import Expect
import Test


tests : Test.Test
tests =
    Test.describe
        "documentation code snippets"
        [ Test.describe
            "A"
            [ Test.describe
                "plus1"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\\() ->
                            (A.Success 1 |> A.plus1)
                                |> Expect.equal (A.Success 2)
                        )
                    ]
                ]
            ]
        ]
"""
                            ]
                          )
                        ]
            )
        , Test.test "creates multiple tests when code snippet contains --> checks with blank lines in between"
            (\() ->
                [ """module A exposing (plus1)

{-| + 1.

    1 |> A.plus1 --> 2

    2 |> A.plus1 --> 3

-}
plus1 n =
    n + 1
"""
                , """module DocumentationCodeSnippetTest exposing (tests)

tests =
    tests
"""
                ]
                    |> Review.Test.runOnModules
                        Review.Documentation.CodeSnippet.check
                    |> Review.Test.expectErrorsForModules
                        [ ( "DocumentationCodeSnippetTest"
                          , [ Review.Test.error
                                { message = "documentation code snippet test can be added"
                                , details =
                                    [ "Adding them will help verify that code blocks in your readme and module documentation work correctly."
                                    ]
                                , under = "module"
                                }
                                |> Review.Test.whenFixed
                                    """module DocumentationCodeSnippetTest exposing (tests)

{-| automatically generated by [elm-review-documentation-code-snippet](https://dark.elm.dmy.fr/packages/lue-bird/elm-review-documentation-code-snippet/latest)

-}

import A
import Expect
import Test


tests : Test.Test
tests =
    Test.describe
        "documentation code snippets"
        [ Test.describe
            "A"
            [ Test.describe
                "plus1"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test "0" (\\() -> (1 |> A.plus1) |> Expect.equal 2)
                    , Test.test "1" (\\() -> (2 |> A.plus1) |> Expect.equal 3)
                    ]
                ]
            ]
        ]
"""
                            ]
                          )
                        ]
            )
        , Test.test "creates multiple tests when code snippet contains --> checks without blank lines in between"
            (\() ->
                [ """module A exposing (plus1)

{-| + 1.

    1 |> A.plus1 --> 2
    2 |> A.plus1 --> 3

-}
plus1 n =
    n + 1
"""
                , """module DocumentationCodeSnippetTest exposing (tests)

tests =
    tests
"""
                ]
                    |> Review.Test.runOnModules
                        Review.Documentation.CodeSnippet.check
                    |> Review.Test.expectErrorsForModules
                        [ ( "DocumentationCodeSnippetTest"
                          , [ Review.Test.error
                                { message = "documentation code snippet test can be added"
                                , details =
                                    [ "Adding them will help verify that code blocks in your readme and module documentation work correctly."
                                    ]
                                , under = "module"
                                }
                                |> Review.Test.whenFixed
                                    """module DocumentationCodeSnippetTest exposing (tests)

{-| automatically generated by [elm-review-documentation-code-snippet](https://dark.elm.dmy.fr/packages/lue-bird/elm-review-documentation-code-snippet/latest)

-}

import A
import Expect
import Test


tests : Test.Test
tests =
    Test.describe
        "documentation code snippets"
        [ Test.describe
            "A"
            [ Test.describe
                "plus1"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test "0" (\\() -> (1 |> A.plus1) |> Expect.equal 2)
                    , Test.test "1" (\\() -> (2 |> A.plus1) |> Expect.equal 3)
                    ]
                ]
            ]
        ]
"""
                            ]
                          )
                        ]
            )
        , Test.test "still parses correctly when checked expression has blank lines"
            (\() ->
                [ """module A exposing (plus1)

{-| + 1.

    case 1 |> A.plus1 of
        2 ->
            2
    
        not2 ->
            not2
    --> 2

-}
plus1 n =
    n + 1
"""
                , """module DocumentationCodeSnippetTest exposing (tests)

tests =
    tests
"""
                ]
                    |> Review.Test.runOnModules
                        Review.Documentation.CodeSnippet.check
                    |> Review.Test.expectErrorsForModules
                        [ ( "DocumentationCodeSnippetTest"
                          , [ Review.Test.error
                                { message = "documentation code snippet test can be added"
                                , details =
                                    [ "Adding them will help verify that code blocks in your readme and module documentation work correctly."
                                    ]
                                , under = "module"
                                }
                                |> Review.Test.whenFixed
                                    """module DocumentationCodeSnippetTest exposing (tests)

{-| automatically generated by [elm-review-documentation-code-snippet](https://dark.elm.dmy.fr/packages/lue-bird/elm-review-documentation-code-snippet/latest)

-}

import A
import Expect
import Test


tests : Test.Test
tests =
    Test.describe
        "documentation code snippets"
        [ Test.describe
            "A"
            [ Test.describe
                "plus1"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\\() ->
                            (case 1 |> A.plus1 of
                                2 ->
                                    2

                                not2 ->
                                    not2
                            )
                                |> Expect.equal 2
                        )
                    ]
                ]
            ]
        ]
"""
                            ]
                          )
                        ]
            )
        , Test.test "creates filled test file with location prefixed declarations when code snippet with declaration exists and DocumentationCodeSnippetTest module exists"
            (\() ->
                [ """module A exposing (toggle)

{-| + 1.

    type Toggle
        = On
        | Off
    
    On |> A.toggle
    --> Off

-}
toggle t =
    case t of
        On ->
            Off
        
        Off ->
            On
"""
                , """module DocumentationCodeSnippetTest exposing (tests)

tests =
    tests
"""
                ]
                    |> Review.Test.runOnModules
                        Review.Documentation.CodeSnippet.check
                    |> Review.Test.expectErrorsForModules
                        [ ( "DocumentationCodeSnippetTest"
                          , [ Review.Test.error
                                { message = "documentation code snippet test can be added"
                                , details =
                                    [ "Adding them will help verify that code blocks in your readme and module documentation work correctly."
                                    ]
                                , under = "module"
                                }
                                |> Review.Test.whenFixed
                                    """module DocumentationCodeSnippetTest exposing (tests)

{-| automatically generated by [elm-review-documentation-code-snippet](https://dark.elm.dmy.fr/packages/lue-bird/elm-review-documentation-code-snippet/latest)

-}

import A
import Expect
import Test


tests : Test.Test
tests =
    Test.describe
        "documentation code snippets"
        [ Test.describe
            "A"
            [ Test.describe
                "toggle"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test
                        "0"
                        (\\() ->
                            (On__A__toggle_0 |> A.toggle)
                                |> Expect.equal Off__A__toggle_0
                        )
                    ]
                ]
            ]
        ]


type Toggle__A__toggle_0
    = On__A__toggle_0
    | Off__A__toggle_0
"""
                            ]
                          )
                        ]
            )
        , Test.test "creates test for module header code snippet"
            (\() ->
                [ """module A exposing (plus1)

{-| This is a module header.

    1 |> A.plus1 --> 2

-}

{-| + 1.
-}
plus1 n =
    n + 1
"""
                , """module DocumentationCodeSnippetTest exposing (tests)

tests =
    tests
"""
                ]
                    |> Review.Test.runOnModules
                        Review.Documentation.CodeSnippet.check
                    |> Review.Test.expectErrorsForModules
                        [ ( "DocumentationCodeSnippetTest"
                          , [ Review.Test.error
                                { message = "documentation code snippet test can be added"
                                , details =
                                    [ "Adding them will help verify that code blocks in your readme and module documentation work correctly."
                                    ]
                                , under = "module"
                                }
                                |> Review.Test.whenFixed
                                    """module DocumentationCodeSnippetTest exposing (tests)

{-| automatically generated by [elm-review-documentation-code-snippet](https://dark.elm.dmy.fr/packages/lue-bird/elm-review-documentation-code-snippet/latest)

-}

import A
import Expect
import Test


tests : Test.Test
tests =
    Test.describe
        "documentation code snippets"
        [ Test.describe
            "A"
            [ Test.describe
                "module header"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test "0" (\\() -> (1 |> A.plus1) |> Expect.equal 2) ]
                ]
            ]
        ]
"""
                            ]
                          )
                        ]
            )
        , Test.test "creates test for module header code snippet, declaration between checks"
            (\() ->
                [ """module A exposing (plus1)

{-|
This is a module header.

    1
    --> 1

    x =
        1
    1
    --> 1

-}

{-| + 1.
-}
plus1 n =
    n + 1
"""
                , """module DocumentationCodeSnippetTest exposing (tests)

tests =
    tests
"""
                ]
                    |> Review.Test.runOnModules
                        Review.Documentation.CodeSnippet.check
                    |> Review.Test.expectErrorsForModules
                        [ ( "DocumentationCodeSnippetTest"
                          , [ Review.Test.error
                                { message = "documentation code snippet test can be added"
                                , details =
                                    [ "Adding them will help verify that code blocks in your readme and module documentation work correctly."
                                    ]
                                , under = "module"
                                }
                                |> Review.Test.whenFixed
                                    """module DocumentationCodeSnippetTest exposing (tests)

{-| automatically generated by [elm-review-documentation-code-snippet](https://dark.elm.dmy.fr/packages/lue-bird/elm-review-documentation-code-snippet/latest)

-}

import Expect
import Test


tests : Test.Test
tests =
    Test.describe
        "documentation code snippets"
        [ Test.describe
            "A"
            [ Test.describe
                "module header"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test "0" (\\() -> 1 |> Expect.equal 1)
                    , Test.test "1" (\\() -> 1 |> Expect.equal 1)
                    ]
                ]
            ]
        ]


x__A__Header_0 =
    1
"""
                            ]
                          )
                        ]
            )
        , Test.test "creates test for readme code snippet"
            (\() ->
                [ """module A exposing (plus1)

{-| + 1.
-}
plus1 n =
    n + 1
"""
                , """module DocumentationCodeSnippetTest exposing (tests)

tests =
    tests
"""
                ]
                    |> Review.Test.runOnModulesWithProjectData
                        (Review.Project.new
                            |> Review.Project.addReadme
                                { path = ""
                                , content =
                                    """This is a readme.

```elm
import A

1 |> A.plus1 --> 2
```
"""
                                }
                        )
                        Review.Documentation.CodeSnippet.check
                    |> Review.Test.expectErrorsForModules
                        [ ( "DocumentationCodeSnippetTest"
                          , [ Review.Test.error
                                { message = "documentation code snippet test can be added"
                                , details =
                                    [ "Adding them will help verify that code blocks in your readme and module documentation work correctly."
                                    ]
                                , under = "module"
                                }
                                |> Review.Test.whenFixed
                                    """module DocumentationCodeSnippetTest exposing (tests)

{-| automatically generated by [elm-review-documentation-code-snippet](https://dark.elm.dmy.fr/packages/lue-bird/elm-review-documentation-code-snippet/latest)

-}

import A
import Expect
import Test


tests : Test.Test
tests =
    Test.describe
        "documentation code snippets"
        [ Test.describe
            "readme"
            [ Test.describe
                "code snippet 0"
                [ Test.test "0" (\\() -> (1 |> A.plus1) |> Expect.equal 2) ]
            ]
        ]
"""
                            ]
                          )
                        ]
            )
        , Test.test "creates test for README code snippet, declaration between checks"
            (\() ->
                [ """module DocumentationCodeSnippetTest exposing (tests)

tests =
    tests
"""
                ]
                    |> Review.Test.runOnModulesWithProjectData
                        (Review.Project.new
                            |> Review.Project.addReadme
                                { path = ""
                                , content = """```elm
1
--> 1

x =
    1
1
--> 1
```"""
                                }
                        )
                        Review.Documentation.CodeSnippet.check
                    |> Review.Test.expectErrorsForModules
                        [ ( "DocumentationCodeSnippetTest"
                          , [ Review.Test.error
                                { message = "documentation code snippet test can be added"
                                , details =
                                    [ "Adding them will help verify that code blocks in your readme and module documentation work correctly."
                                    ]
                                , under = "module"
                                }
                                |> Review.Test.whenFixed
                                    """module DocumentationCodeSnippetTest exposing (tests)

{-| automatically generated by [elm-review-documentation-code-snippet](https://dark.elm.dmy.fr/packages/lue-bird/elm-review-documentation-code-snippet/latest)

-}

import Expect
import Test


tests : Test.Test
tests =
    Test.describe
        "documentation code snippets"
        [ Test.describe
            "readme"
            [ Test.describe
                "code snippet 0"
                [ Test.test "0" (\\() -> 1 |> Expect.equal 1)
                , Test.test "1" (\\() -> 1 |> Expect.equal 1)
                ]
            ]
        ]


x__Readme_0 =
    1
"""
                            ]
                          )
                        ]
            )
        , Test.test "shows error when expression after --> doesn't parse"
            (\() ->
                [ """module A exposing (plus1)

{-| + 1.

    1 |> plus1 --> | wow! |

-}
plus1 n =
    n + 1
"""
                , """module DocumentationCodeSnippetTest exposing (tests)

tests =
    tests
"""
                ]
                    |> Review.Test.runOnModules
                        Review.Documentation.CodeSnippet.check
                    |> Review.Test.expectErrorsForModules
                        [ ( "A"
                          , [ Review.Test.error
                                { message = "code snippet expectation parsing failed"
                                , details =
                                    [ "Whenever I see the expectation marker -->, I expect a syntactically valid expression next. However, I wasn't able to parse what comes after the 1st marker among all checks."
                                    , "If you don't see an obvious mistake, try moving the code to an elm module and see where the compiler complains."
                                    ]
                                , under = """    1 |> plus1 --> | wow! |
"""
                                }
                            ]
                          )
                        , ( "DocumentationCodeSnippetTest"
                          , [ Review.Test.error
                                { message = "documentation code snippet test can be added"
                                , details =
                                    [ "Adding them will help verify that code blocks in your readme and module documentation work correctly."
                                    ]
                                , under = "module"
                                }
                                |> Review.Test.whenFixed
                                    emptyGeneratedTestSource
                            ]
                          )
                        ]
            )
        , Test.test "shows error when expression after --: doesn't parse"
            (\() ->
                [ """module A exposing (plus1)

{-| + 1.

    1 |> plus1 --: | wow! |

-}
plus1 n =
    n + 1
"""
                , """module DocumentationCodeSnippetTest exposing (tests)

tests =
    tests
"""
                ]
                    |> Review.Test.runOnModules
                        Review.Documentation.CodeSnippet.check
                    |> Review.Test.expectErrorsForModules
                        [ ( "A"
                          , [ Review.Test.error
                                { message = "code snippet expectation parsing failed"
                                , details =
                                    [ "Whenever I see the expectation marker --:, I expect a syntactically valid type next. However, I wasn't able to parse what comes after the 1st marker among all checks."
                                    , "If you don't see an obvious mistake, try moving the code to an elm module and see where the compiler complains."
                                    ]
                                , under = """    1 |> plus1 --: | wow! |
"""
                                }
                            ]
                          )
                        , ( "DocumentationCodeSnippetTest"
                          , [ Review.Test.error
                                { message = "documentation code snippet test can be added"
                                , details =
                                    [ "Adding them will help verify that code blocks in your readme and module documentation work correctly."
                                    ]
                                , under = "module"
                                }
                                |> Review.Test.whenFixed
                                    emptyGeneratedTestSource
                            ]
                          )
                        ]
            )
        , Test.test "shows error when declarations/imports part doesn't parse"
            (\() ->
                [ """module A exposing (plus1)

{-| + 1.

    import | wow! |
    
    1 |> A.plus1 --> 2

-}
plus1 n =
    n + 1
"""
                , """module DocumentationCodeSnippetTest exposing (tests)

tests =
    tests
"""
                ]
                    |> Review.Test.runOnModules
                        Review.Documentation.CodeSnippet.check
                    |> Review.Test.expectErrorsForModules
                        [ ( "A"
                          , [ Review.Test.error
                                { message = "code snippet parsing failed"
                                , details =
                                    [ "I expected to find syntactically valid elm code here but something is off with the imports/declarations."
                                    , "If you don't see an obvious mistake, try moving the code to an elm module and see where the compiler complains."
                                    ]
                                , under = """    import | wow! |
"""
                                }
                            ]
                          )
                        , ( "DocumentationCodeSnippetTest"
                          , [ Review.Test.error
                                { message = "documentation code snippet test can be added"
                                , details =
                                    [ "Adding them will help verify that code blocks in your readme and module documentation work correctly."
                                    ]
                                , under = "module"
                                }
                                |> Review.Test.whenFixed
                                    emptyGeneratedTestSource
                            ]
                          )
                        ]
            )
        , Test.test "reports unknown references in checked expression and creates empty test file when one code snippet with unknown references exist and DocumentationCodeSnippetTest module exists"
            (\() ->
                [ """module A exposing (plus1)

{-| + 1.

    1 |> plus1 1 --> 2

-}
plus1 =
    (+) 1
"""
                , """module DocumentationCodeSnippetTest exposing (tests)

tests =
    tests
"""
                ]
                    |> Review.Test.runOnModules
                        Review.Documentation.CodeSnippet.check
                    |> Review.Test.expectErrorsForModules
                        [ ( "A"
                          , [ Review.Test.error
                                { message = "documentation code snippet uses unknown references"
                                , details =
                                    [ "The checked expression in the 1st check (just before the --> marker) uses the name plus1 which isn't imported or defined there."
                                    , "Maybe they there's a typo or missing import? Known that no members of any of your modules are exposed by default. To implicitly expose all members from the current module, use checkImplicitlyImportingEverythingFromCurrentModule: https://dark.elm.dmy.fr/packages/lue-bird/elm-documentation-code-snippet/latest/Review-Documentation-CodeSnippet#checkImplicitlyImportingEverythingFromCurrentModule"
                                    ]
                                , under = """    1 |> plus1 1 --> 2
"""
                                }
                            ]
                          )
                        , ( "DocumentationCodeSnippetTest"
                          , [ Review.Test.error
                                { message = "documentation code snippet test can be added"
                                , details =
                                    [ "Adding them will help verify that code blocks in your readme and module documentation work correctly."
                                    ]
                                , under = "module"
                                }
                                |> Review.Test.whenFixed
                                    emptyGeneratedTestSource
                            ]
                          )
                        ]
            )
        , Test.test "reports unknown references in expected expression and creates empty test file when one code snippet with unknown references exist and DocumentationCodeSnippetTest module exists"
            (\() ->
                [ """module A exposing (plus1)

{-| + 1.

    2 --> 1 |> plus1 1

-}
plus1 =
    (+) 1
"""
                , """module DocumentationCodeSnippetTest exposing (tests)

tests =
    tests
"""
                ]
                    |> Review.Test.runOnModules
                        Review.Documentation.CodeSnippet.check
                    |> Review.Test.expectErrorsForModules
                        [ ( "A"
                          , [ Review.Test.error
                                { message = "documentation code snippet uses unknown references"
                                , details =
                                    [ "The expected expression in the 1st check (after the --> marker) uses the name plus1 which isn't imported or defined there."
                                    , "Maybe they there's a typo or missing import? Known that no members of any of your modules are exposed by default. To implicitly expose all members from the current module, use checkImplicitlyImportingEverythingFromCurrentModule: https://dark.elm.dmy.fr/packages/lue-bird/elm-documentation-code-snippet/latest/Review-Documentation-CodeSnippet#checkImplicitlyImportingEverythingFromCurrentModule"
                                    ]
                                , under = """    2 --> 1 |> plus1 1
"""
                                }
                            ]
                          )
                        , ( "DocumentationCodeSnippetTest"
                          , [ Review.Test.error
                                { message = "documentation code snippet test can be added"
                                , details =
                                    [ "Adding them will help verify that code blocks in your readme and module documentation work correctly."
                                    ]
                                , under = "module"
                                }
                                |> Review.Test.whenFixed
                                    emptyGeneratedTestSource
                            ]
                          )
                        ]
            )
        , Test.test "reports unknown references in expected type and creates empty test file when one code snippet with unknown references exist and DocumentationCodeSnippetTest module exists"
            (\() ->
                [ """module A exposing (plus1)

{-| + 1.

    1 |> A.plus1 1 --: Integer

-}
plus1 =
    (+) 1
"""
                , """module DocumentationCodeSnippetTest exposing (tests)

tests =
    tests
"""
                ]
                    |> Review.Test.runOnModules
                        Review.Documentation.CodeSnippet.check
                    |> Review.Test.expectErrorsForModules
                        [ ( "A"
                          , [ Review.Test.error
                                { message = "documentation code snippet uses unknown references"
                                , details =
                                    [ "The expected type in the 1st check (after the --: marker) uses the name Integer which isn't imported or defined there."
                                    , "Maybe they there's a typo or missing import? Known that no members of any of your modules are exposed by default. To implicitly expose all members from the current module, use checkImplicitlyImportingEverythingFromCurrentModule: https://dark.elm.dmy.fr/packages/lue-bird/elm-documentation-code-snippet/latest/Review-Documentation-CodeSnippet#checkImplicitlyImportingEverythingFromCurrentModule"
                                    ]
                                , under = """    1 |> A.plus1 1 --: Integer
"""
                                }
                            ]
                          )
                        , ( "DocumentationCodeSnippetTest"
                          , [ Review.Test.error
                                { message = "documentation code snippet test can be added"
                                , details =
                                    [ "Adding them will help verify that code blocks in your readme and module documentation work correctly."
                                    ]
                                , under = "module"
                                }
                                |> Review.Test.whenFixed
                                    emptyGeneratedTestSource
                            ]
                          )
                        ]
            )
        , Test.test "reports unknown references in expected type and creates empty test file when one code snippet with multiple unknown qualified references exist and DocumentationCodeSnippetTest module exists"
            (\() ->
                [ """module A exposing (plus1)

{-| + 1.

    1 |> A.plus1 1
    --> Set.fromList [ (), () ] |> Set.size

-}
plus1 =
    (+) 1
"""
                , """module DocumentationCodeSnippetTest exposing (tests)

tests =
    tests
"""
                ]
                    |> Review.Test.runOnModules
                        Review.Documentation.CodeSnippet.check
                    |> Review.Test.expectErrorsForModules
                        [ ( "A"
                          , [ Review.Test.error
                                { message = "documentation code snippet uses unknown references"
                                , details =
                                    [ "The expected expression in the 1st check (after the --> marker) uses the names Set.fromList and Set.size which aren't imported or defined there."
                                    , "Maybe they there's a typo or missing import? Known that no members of any of your modules are exposed by default. To implicitly expose all members from the current module, use checkImplicitlyImportingEverythingFromCurrentModule: https://dark.elm.dmy.fr/packages/lue-bird/elm-documentation-code-snippet/latest/Review-Documentation-CodeSnippet#checkImplicitlyImportingEverythingFromCurrentModule"
                                    ]
                                , under = """    1 |> A.plus1 1
"""
                                }
                            ]
                          )
                        , ( "DocumentationCodeSnippetTest"
                          , [ Review.Test.error
                                { message = "documentation code snippet test can be added"
                                , details =
                                    [ "Adding them will help verify that code blocks in your readme and module documentation work correctly."
                                    ]
                                , under = "module"
                                }
                                |> Review.Test.whenFixed
                                    emptyGeneratedTestSource
                            ]
                          )
                        ]
            )
        , Test.test "reports unknown references in expected type and creates empty test file when a second code snippet with unknown references exist and DocumentationCodeSnippetTest module exists"
            (\() ->
                [ """module A exposing (plus1)

{-| + 1.

    1 |> A.plus1 1 --: Int
    1 |> A.plus1 1 --: Unt

-}
plus1 =
    (+) 1
"""
                , """module DocumentationCodeSnippetTest exposing (tests)

tests =
    tests
"""
                ]
                    |> Review.Test.runOnModules
                        Review.Documentation.CodeSnippet.check
                    |> Review.Test.expectErrorsForModules
                        [ ( "A"
                          , [ Review.Test.error
                                { message = "documentation code snippet uses unknown references"
                                , details =
                                    [ "The expected type in the 2nd check (after the --: marker) uses the name Unt which isn't imported or defined there."
                                    , "Maybe they there's a typo or missing import? Known that no members of any of your modules are exposed by default. To implicitly expose all members from the current module, use checkImplicitlyImportingEverythingFromCurrentModule: https://dark.elm.dmy.fr/packages/lue-bird/elm-documentation-code-snippet/latest/Review-Documentation-CodeSnippet#checkImplicitlyImportingEverythingFromCurrentModule"
                                    ]
                                , under = """    1 |> A.plus1 1 --: Int
"""
                                }
                            ]
                          )
                        , ( "DocumentationCodeSnippetTest"
                          , [ Review.Test.error
                                { message = "documentation code snippet test can be added"
                                , details =
                                    [ "Adding them will help verify that code blocks in your readme and module documentation work correctly."
                                    ]
                                , under = "module"
                                }
                                |> Review.Test.whenFixed
                                    emptyGeneratedTestSource
                            ]
                          )
                        ]
            )
        , Test.test "checkImplicitlyImportingEverythingFromCurrentModule allows unqualified references"
            (\() ->
                [ """module A exposing (plus1)

{-| + 1.

    1 |> plus1 --> 2

-}
plus1 n =
    n + 1
"""
                , """module DocumentationCodeSnippetTest exposing (tests)

tests =
    tests
"""
                ]
                    |> Review.Test.runOnModules
                        Review.Documentation.CodeSnippet.checkImplicitlyImportingEverythingFromCurrentModule
                    |> Review.Test.expectErrorsForModules
                        [ ( "DocumentationCodeSnippetTest"
                          , [ Review.Test.error
                                { message = "documentation code snippet test can be added"
                                , details =
                                    [ "Adding them will help verify that code blocks in your readme and module documentation work correctly."
                                    ]
                                , under = "module"
                                }
                                |> Review.Test.whenFixed
                                    """module DocumentationCodeSnippetTest exposing (tests)

{-| automatically generated by [elm-review-documentation-code-snippet](https://dark.elm.dmy.fr/packages/lue-bird/elm-review-documentation-code-snippet/latest)

-}

import A
import Expect
import Test


tests : Test.Test
tests =
    Test.describe
        "documentation code snippets"
        [ Test.describe
            "A"
            [ Test.describe
                "plus1"
                [ Test.describe
                    "code snippet 0"
                    [ Test.test "0" (\\() -> (1 |> A.plus1) |> Expect.equal 2) ]
                ]
            ]
        ]
"""
                            ]
                          )
                        ]
            )
        ]


emptyGeneratedTestSource : String
emptyGeneratedTestSource =
    """module DocumentationCodeSnippetTest exposing (tests)

{-| automatically generated by [elm-review-documentation-code-snippet](https://dark.elm.dmy.fr/packages/lue-bird/elm-review-documentation-code-snippet/latest)

-}

import Expect
import Test


tests : Test.Test
tests =
    Test.describe
        "documentation code snippets"
        [ Test.test
            "currently none. Since having no code snippets is perfectly fine, adding this simple test tells elm-test that everything's good (empty tests fail or throw warnings)"
            (\\() -> Expect.pass)
        ]
"""

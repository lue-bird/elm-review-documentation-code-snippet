module Tests exposing (tests)

import Elm.Project
import Json.Decode
import Review.Documentation.CodeSnippet
import Review.Project
import Review.Test
import Review.Test.Dependencies
import Test exposing (Test)


tests : Test
tests =
    Test.describe "elm-review-opaque-type"
        [ Test.test "creates \"empty\" test file when no code snippets exist and a DocumentationCodeSnippet.Test module does exist"
            (\() ->
                [ """module A exposing (a)

a =
    a
"""
                , """module DocumentationCodeSnippet.Test exposing (tests)

tests =
    tests
"""
                ]
                    |> Review.Test.runOnModules
                        Review.Documentation.CodeSnippet.check
                    |> Review.Test.expectErrorsForModules
                        [ ( "DocumentationCodeSnippet.Test"
                          , [ Review.Test.error
                                { message = "documentation code snippet test can be added"
                                , details =
                                    [ "Adding them will help verify that code blocks in your readme and module documentation work correctly."
                                    ]
                                , under = "module"
                                }
                                |> Review.Test.whenFixed
                                    """module DocumentationCodeSnippet.Test exposing (tests)

{-| automatically generated by [elm-review-documentation-code-snippet](https://dark.elm.dmy.fr/packages/lue-bird/elm-review-documentation-code-snippet/latest)

-}

import Expect
import Test


tests : Test.Test
tests =
    Test.describe "documentation code snippets" []
"""
                            ]
                          )
                        ]
            )
        , Test.test "reports missing DocumentationCodeSnippet.Test module"
            (\() ->
                """module A exposing (a)

a =
    a
"""
                    |> Review.Test.run Review.Documentation.CodeSnippet.check
                    |> Review.Test.expect
                        [ Review.Test.globalErrors
                            [ { message = "documentation code snippet test module needs to be added"
                              , details =
                                    [ "We need a module to generate documentation code snippet tests in. Please add a module tests/DocumentationCodeSnippet/Test.elm."
                                    ]
                              }
                            ]
                        ]
            )
        ]


elmJsonDataFromRawSource : String -> { path : String, raw : String, project : Elm.Project.Project }
elmJsonDataFromRawSource =
    \rawSource ->
        { path = "/"
        , raw = rawSource
        , project =
            case rawSource |> Json.Decode.decodeString Elm.Project.decoder of
                Ok ok ->
                    ok

                Err error ->
                    Debug.todo (error |> Json.Decode.errorToString)
        }


sampleApplicationProject : Review.Project.Project
sampleApplicationProject =
    Review.Test.Dependencies.projectWithElmCore
        |> Review.Project.addElmJson
            ("""{
    "type": "application",
    "source-directories": [
        "src"
    ],
    "elm-version": "0.19.1",
    "dependencies": {
        "direct": {
            "elm/core": "1.0.5"
        },
        "indirect": {
            "elm/json": "1.1.3"
        }
    },
    "test-dependencies": {
        "direct": {},
        "indirect": {}
    }
}
"""
                |> elmJsonDataFromRawSource
            )


samplePackageProjectExposingModuleA : Review.Project.Project
samplePackageProjectExposingModuleA =
    Review.Test.Dependencies.projectWithElmCore
        |> Review.Project.addElmJson
            ("""{
    "type": "package",
    "name": "lue-bird/elm-review-opaque-type-test-package",
    "summary": "example",
    "license": "MIT",
    "version": "1.0.0",
    "exposed-modules": [
        "A"
    ],
    "elm-version": "0.19.0 <= v < 0.20.0",
    "dependencies": {
        "elm/core": "1.0.5 <= v < 2.0.0"
    },
    "test-dependencies": {
    }
}
"""
                |> elmJsonDataFromRawSource
            )
